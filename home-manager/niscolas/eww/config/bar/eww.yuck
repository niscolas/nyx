(defpoll clock_time :interval "1m" "scripts/clock.nu")

(defpoll volume_percent :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")

(defpoll mic_percent :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")

(defpoll battery :interval "15s" "scripts/battery --bat")
(defpoll battery_status :interval "1m" "scripts/battery --bat-st")

(defpoll memory :interval "15s" "scripts/ram_usage_percent.nu")
(defpoll memory_used_mb :interval "2m" "scripts/mem-ad used")
(defpoll memory_total_mb :interval "2m" "scripts/mem-ad total")
(defpoll memory_free_mb :interval "2m" "scripts/mem-ad free")

(defvar vol_reveal false)
(defvar br_reveal false)
(defvar music_reveal false)
(defvar time_rev false)

(deflisten workspaces_content "tail -F ~/.cache/awesome_eww_workspaces.log")

(defvar eww "eww -c ~/.config/eww/bar")

(defpoll cover_art :interval "2s" "scripts/music_info --cover")
(defpoll current_status :interval "1s"  "scripts/music_info --time")
(defpoll song :interval "2s"  "scripts/music_info --song")
(defpoll song_artist :interval "2s" "scripts/music_info --artist")
(defpoll song_status :interval "2s" "scripts/music_info --status")

(defpoll calendar_day :interval "20h" "date '+%d'")
(defpoll calendar_year :interval "20h" "date '+%Y'")

(defwidget workspaces_widget []
    (box
        :class "workspaces-widget"
        :orientation "h"
        :space-evenly "false" 
        (label :text " " :class "workspaces-prefix")
        (literal :content workspaces_content)
        (label :class "workspaces-suffix")
))

(defwidget bat []
		(box :class "bat_module" :vexpand "false" :hexpand "false"
            (circular-progress :value battery
                :class "batbar"
                :thickness 4
            (button
                :class "iconbat"
                :limit-width 2
                :tooltip "battery on ${battery}%"
                :show_truncated false
                :onclick "scripts/pop system"
                :wrap false
                ""))))

(defwidget mem []
		(box :class "mem_module" :vexpand "false" :hexpand "false"
            (circular-progress :value memory
                :class "membar"
                :thickness 4
            (button
                :class "iconmem"
                :limit-width 2
                :tooltip "using ${memory}% ram"
                :onclick "scripts/pop system"
                :show_truncated false
                :wrap false
                ""))))

(defwidget separator []
    (box :vexpand "false" :hexpand "false"
        (label :class "separator")
))

(defwidget clock_module []
    (box
        :space-evenly "false"
        :orientation "h"
        :spacing "3"
        (label :text " " :class "calendar-prefix")
        (button :class "clock_time_class"
                :onclick "firefox calendar.google.com" clock_time)
        (label :class "calendar-suffix")
))

(defwidget volume []
  (eventbox :onhover "${eww} update vol_reveal=true"
			  :onhoverlost "${eww} update vol_reveal=false"
  (box :class "module-2" :space-evenly "false" :orientation "h" :spacing "3"
	(button   :onclick "scripts/pop audio"   :class "volume_icon" "󰕾")
	(revealer :transition "slideleft"
			  :reveal vol_reveal
			  :duration "350ms"
	(scale    :class "volbar"
			  :value volume_percent
			  :orientation "h"
			  :tooltip "${volume_percent}%"
			  :max 100
			  :min 0
			  :onchange "amixer -D pulse sset Master {}%" )))))

;;  Music
(defwidget music []
  (eventbox :onhover "${eww} update music_reveal=true"
			  :onhoverlost "${eww} update music_reveal=false"
		(box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
			(button :class "song" :wrap "true" :onclick "scripts/pop music" song)
	    (revealer :transition "slideright"
			      :reveal music_reveal
			      :duration "350ms"
          (box :vexpand "false" :hexpand "false" :oreintation "h"
                    (button :class "song_btn_prev" :onclick "scripts/music_info --prev" "")
					(button :class "song_btn_play" :onclick "scripts/music_info --toggle" song_status)
					(button :class "song_btn_next" :onclick "scripts/music_info --next" ""))))))

(defwidget system_widgets []
	(box
        :orientation "h"
        :space-evenly false
        :halign "start"
        (label :text " " :class "system-prefix")
        (bat)
        (mem)
        (label :class "system-suffix")
))

(defwidget left []
	(box
        :orientation "h"
		:space-evenly false
        :halign "start"
		:class "left_modules"
        (workspaces_widget)
))

(defwidget center []
	(box
        :orientation "h"
        :space-evenly false
        :halign "center"
        :class "center_modules"

        (system_widgets)
        (separator)
        (clock_module)
))

(defwidget right []
	(box
        :orientation "h"
        :space-evenly false
        :halign "end"
        :class "right_modules"
))

(defwidget bar_1 []
    (box
        :class "bar"
        :orientation "h"
        (left)
        (center)
        (right)
))

(defwindow bar
    :geometry (geometry
	:y "1%"
	:width "98%"
	:height "40px"
	:anchor "top center")
    :stacking "bg"
    :wm-ignore false
  (bar_1))

(defwidget system []
  (box :class "sys_win" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false" :spacing 0
  (box :class "sys_bat_box" :orientation "h" :space-evenly "false"
      (circular-progress :value battery
                :class "sys_bat"
                :thickness 9
            (label :text ""
                :class "sys_icon_bat"
                :limit-width 2
                :show_truncated false
                :wrap false))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "battery"
                :halign "start"
                :class "sys_text_bat"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${battery}%"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${battery_status}"
                :halign "start"
                :class "sys_text_bat_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))
            (label :text "" :class "sys_sep" :halign "center")
  (box :class "sys_mem_box" :orientation "h" :space-evenly "false" :halign "start"
      (circular-progress :value memory
                :class "sys_mem"
                :thickness 9
            (label :text ""
                :class "sys_icon_mem"
                :limit-width 2
                :show_truncated false
                :wrap false
                :angle 0.0))
            (box :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
            (label :text "memory"
                :halign "start"
                :class "sys_text_mem"
                :limit-width 9
                :show_truncated false
                :wrap false)
            (label :text "${memory_used_mb} | ${memory_total_mb}mb "
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)
            (label :text "${memory_free_mb}mb free"
                :halign "start"
                :class "sys_text_mem_sub"
                :limit-width 22
                :show_truncated false
                :wrap false)))))

(defwidget cal []
	(box :class "cal" :orientation "v"
	(box :class "cal-in"
	(calendar :class "cal"
			  :day calendar_day
			  :year calendar_year))))

(defwindow calendar
	:geometry (geometry :x "-20px"
						:y "7%"
                        :anchor "top right"
						:width "270px"
						:height "60px")
(cal))

(defwidget audio []
	(box :class "audio-box" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false"
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "speaker_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "speaker_text" :text "speaker" :valign "center" :halign "left" )
	(box :class "speaker_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value volume_percent
              :space-evenly "false"
			  :orientation "h"
			  :onchange "amixer -D pulse sset Master {}%"
              :tooltip "volume on ${volume_percent}%"
			  :max 100
			  :min 0))))
            (label :text "" :class "audio_sep" :halign "center")
	(box :halign "v" :space-evenly "false" :hexpand "false" :vexpand "false"
	(box :class "mic_icon" :orientation "v")
	(box :orientation "v" :halign "center" :vexpand "false" :hexpand "false"
    (label :class "mic_text" :text "mic" :valign "center" :halign "left" )
	(box :class "mic_bar" :halign "center" :vexpand "false" :hexpand "false"
	(scale    :value mic_percent
              :space-evenly "false"
			  :orientation "h"
              :tooltip "mic on ${mic_percent}%"
			  :onchange "amixer -D pulse sset Capture {}%"
			  :max 100
			  :min 0))))))

(defwindow audio_ctl
	:geometry (geometry :x "-20px"
						:y "7%"
                        :anchor "top right"
						:width "280px"
						:height "60px")
(audio))


(defwindow system
	:geometry (geometry :x "-20px"
						:y "7%"
                        :anchor "top right"
						:width "290px"
						:height "120px")
(system))

;;  Music
(defwidget music_pop []
		(box :class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
			(box :class "music_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
			(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false"
				(label :halign "center" :class "music" :wrap "true" :limit-width 13 :text song)
				(label :halign "center" :class "music_artist" :wrap "true" :limit-width 15 :text song_artist)
				(box :orientation "h" :spacing 15 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
					(button :class "music_btn_prev" :onclick "scripts/music_info --prev" "")
					(button :class "music_btn_play" :onclick "scripts/music_info --toggle" song_status)
					(button :class "music_btn_next" :onclick "scripts/music_info --next" ""))
				(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
					(scale :onscroll "mpc -q seek {}" :min 0 :active "true" :max 100 :value current_status)))))


;;  music
		(defwindow music_win :stacking "fg" :focusable "false" :screen 1
			    :geometry (geometry :x "0" :y "7%" :width 428 :height 104 :anchor "top center")
			     				(music_pop))
