(defpoll battery_status :interval "5s" "my-battery")
(defpoll clock_time :interval "1m" "my-eww-bar-clock")
(defpoll cpu_temp :interval "5s" "my-thermals --cpu")
(defpoll cpu_usage :interval "5s" "my-cpu")
(defpoll current_specialisation :interval "10s" "cat /etc/current-specialisation")
(defpoll used_ram_percent :interval "15s" "my-ram --percent")
;; (defpoll gpu_temp :interval "5s" "my-thermals --gpu")

(deflisten workspaces_content "tail -F ~/.cache/eww_workspaces")

(defvar eww "eww -c ~/.config/eww/bar")

(defwidget workspaces_widget []
    (box
        :class "workspaces-widget"
        :orientation "h"
        :space-evenly false 
        (label :text " " :class "workspaces-prefix")
        (literal :content workspaces_content)
        (label :class "workspaces-suffix")
))

(defwidget battery_widget []
    (box
        :class "battery-widget"
        :hexpand false
        :space-evenly false 
        :vexpand false
        (label :class "battery-label" :text battery_status)
))

(defwidget cpu_usage_widget []
    (box
        :class "cpu-usage-widget"
        :hexpand false
        :space-evenly false 
        :vexpand false
        (label :class "cpu-usage-prefix" :text " ")
        (label :class "cpu-usage-label" :text cpu_usage)
        (label :class "cpu-usage-label" :text "%")
))

(defwidget temperature_widget []
    (box
        :class "temperature-widget"
        :hexpand false
        :space-evenly false 
        :vexpand false
        (label :class "thermometer-label" :text " ")
        (label :class "cpu-temperature-label" :text cpu_temp)
        ;; (label :class "gpu-temperature-label" :text gpu_temp)
))

(defwidget specialisation_widget []
    (box
        :class "specialisation-widget"
        :hexpand false
        :space-evenly false
        :vexpand false
        (label :class "specialisation-prefix" :text "󱄅 ")
        (label :class "specialisation-label" :text current_specialisation)
))

(defwidget ram_widget []
    (box
        :class "ram-widget"
        :hexpand false
        :space-evenly false 
        :vexpand false
        (label :class "ram-prefix" :text "󰘚  ")
        (label :class "ram-label" :text used_ram_percent)
        (label :class "ram-label" :text "% ")
))

(defwidget separator_widget []
    (box
        :hexpand false
        :vexpand false
        (label :class "separator")
))

(defwidget clock_widget []
    (box
        :class "clock-widget"
        :orientation "h"
        :space-evenly false
        :spacing "3"
        (label :text " " :class "clock-prefix")
        (button
            :class "clock-label"
            :onclick "firefox https://calendar.google.com/" clock_time)
        (label :class "clock-suffix")
))

(defwidget system_widget []
	(box
        :class "system-widget"
        :space-evenly false
        (label :text " " :class "system-prefix")
        (box
            :class "system-content"
            :space-evenly false
            (battery_widget)
            (separator_widget)
            (cpu_usage_widget)
            (separator_widget)
            (temperature_widget)
            (separator_widget)
            (specialisation_widget)
            (separator_widget)
            (ram_widget))
        (label :class "system-suffix")
))

(defwidget tray_widget []
	(box
        :class "tray-widget"
        :space-evenly false
        (label :text " " :class "tray-prefix")
        (box :class "tray-content" :space-evenly false)
        (label :class "tray-suffix")
))

(defwidget left []
    (box
        :class "left_modules"
        :space-evenly false
        :halign "start"
        :hexpand true
        :orientation "h"
        (workspaces_widget)
))

(defwidget center []
	(box
        :class "center_modules"
        :halign "center"
        :hexpand true
        :orientation "h"
        :space-evenly false
        (clock_widget)
))

(defwidget right []
	(box
        :class "right_modules"
        :halign "end"
        :hexpand true
        :orientation "h"
        :space-evenly false
        (system_widget)
        (separator_widget)
        (tray_widget)
))

(defwidget bar_widget []
    (box
        :class "bar-widget"
        :orientation "h"
        :space-evenly false
        (left)
        (center)
        (right)
))

(defwindow bar
    :geometry
        (geometry
            :y "1%"
            :width "98%"
            :height "40px"
            :anchor "top center")
    :reserve (struts :distance "48px" :side "top")
    :stacking "bg"
    :wm-ignore false
    (bar_widget)
)
